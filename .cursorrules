What are we building 

Create a Swift UIKit equivalent of the Prompt-Kit component library, designed specifically for developing AI-driven chat interfaces in iOS apps. The framework should emphasize modularity, ease of integration, and customizable aesthetics, allowing developers to rapidly prototype and build conversational interfaces with the following key components:

PromptInputView: A user-friendly input component that supports text entry, placeholder hints, send actions, and input validation.

MessageBubbleView: Customizable chat bubbles for messages, differentiating between user and AI-generated content, with support for text formatting and interactive elements.

MarkdownRenderer: A SwiftUI view or UIKit component capable of rendering Markdown-formatted text with support for rich formatting including bold, italic, bullet lists, links, and code blocks.

AutoScrollingChatView: A responsive, scrollable chat container that automatically scrolls to the latest message, enhancing the user experience during live interactions.

LoadingIndicatorView: A visually appealing loader to indicate processing or awaiting AI responses.

PromptSuggestionView: Interactive prompts or suggestion chips to guide user interaction and improve engagement.

RealTimeResponseHandler: Logic to handle streaming responses from AI models, updating UI dynamically as content arrives.

ReasoningDisclosureView: Optional expandable view to display the AI model's reasoning steps, enhancing transparency and trust.

Ensure modularity, clarity, and extensibility. Prioritize clean, reusable SwiftUI components or UIKit views wrapped for SwiftUI compatibility, structured clearly for maintainability.

Swift UIKit component demo app that:
    •    Shows a UITableView with a list of all Prompt-Kit UI components.
    •    When a component name is tapped, navigates (pushes) to a UIViewController demonstrating the selected component embedded in a minimal, interactive example view.
    •    Each demo UIViewController should clearly showcase essential interactions and states of its component.
    •    Display an error message if the user taps on a component that has not been implemented yet
    •    Structure the code cleanly with clear navigation logic and reusable component views.
    •    Follow UIKit best practices for readability, maintainability, and simplicity.
    
Coding rules

You are an expert in coding with Swift, and UIKit. you always write maintainable code and clean code.
Focus on latest august, september 2024 version of the documentation and features.
Your descriptions should be short and concise.
Don't remove any comments.

You are building a Swift UIKit library equivalent of Prompt-Kit (https://www.prompt-kit.com/), a UI toolkit specifically designed for AI-driven chat interfaces.

Follow these guidelines strictly:
- All view subclasses should clearly end with 'View' (e.g., MessageBubbleView).
- Use UIKit delegation patterns; delegate protocols must end with 'Delegate'.
- Use 'setup' or 'configure' as prefixes for methods that initialize or set properties of views.
- Create UIView properties using 'let' if their references won't change post-initialization.
- Always set translatesAutoresizingMaskIntoConstraints = false when using AutoLayout.
- Mark target-action methods with '@objc' for UIKit compatibility.
- Use lazy initialization only for views needing self-references or heavy initialization.
- Keep the viewDidLoad method concise; delegate detailed setup logic to clearly named private methods.
- Use '// MARK:' comments to segment code clearly and improve readability.
- Declare UIView subclasses as 'final' unless intentionally designed for inheritance.
- Look inside SwiftPromptKit/TypescriptExamples/ for documentation of components and typescript code that we're trying to port over to Swift 
- Always ignore any "No such module UIKit" related linter errors, I'll manually resolve those

Prioritize readability, modularity, and adherence to UIKit best practices.